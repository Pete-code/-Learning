"""
内存的分类
栈区和堆区
栈区： 内存中的内存，比较快，但空间比较小
堆区； 内存中的硬盘，比较慢，但空间比较大
拷贝的分类以及概念
不拷贝： 只是在原来栈区的空间中重新命名，栈区和堆区都没有拷贝
浅拷贝： 在栈区中拷贝了一个空间，但堆区中没有拷贝 ---> 两个不同的对象指向同一个堆区的空间
深拷贝： 栈区和堆区都进行了拷贝，--> 两个对象指向了两个不同的堆区内存空间
应用举例： 浅拷贝： ravel方法 深拷贝： flatten 方法
"""
import numpy
#  不拷贝
a1 = numpy.arange(12)
a2 = a1
print("a1的栈区是否等于a2的栈区{}".format(a1 is a2))
a1[0] = 100
print("修改a1的值后a1 = {}， a2 = {}".format(a1, a2)) # a1 a2 指向同一个堆区的空间，并且a1 a2所在的栈区空间相同

# 浅拷贝
a3 = a1.view()
print("a1的栈区是否等于a3的栈区{}".format(a1 is a3))
a1[1] = 1339
print("修改a1的值后a1 = {}， a3 = {}".format(a1, a3))     # a1 a3 的栈区空间不同，但指向同一个堆区空间


# 深拷贝

a4 = a1.copy()
print("a1的栈区是否等于a4的栈区{}".format(a1 is a4))
a1[1] = 3939
print("修改a1的值后a1 = {}， a4 = {}".format(a1, a4))         #a1 a4 的栈区空间不同，并且指向不用的堆区空间

